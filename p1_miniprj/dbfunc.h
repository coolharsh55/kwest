/* DATABASE FUNCTIONS */

/* LICENSE
   Copyright [2012] [harshvardhan pandit]
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
       http://www.apache.org/licenses/LICENSE-2.0
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

#ifndef DBFUNC1_H_INCLUDED
#define DBFUNC1_H_INCLUDED

#define INT_SIZE 5

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sqlite3.h>	/* sqlite header file */

/* ------------ Global Variables ---------------- */

static sqlite3 *db;
sqlite3_stmt *stmt;

static char query[100];
int retval;

/* Link List */
typedef struct Node 
{
  char *data;
  struct Node *next;
}node;

/* Structure for holding metadata of a file */
struct meta
{
  int inode;
  int size; 
};

/* ------------ Database Connections -------------- */

/* createdb: 	Create database for first use
 * return: 	1 on SUCCESS
 * author:	@SG
 * */
int createdb(void);

/* initdb: 	Establish Database Connection
 * return: 	1 on SUCCESS
 * author:	@SG
 * */
int initdb(void);

/* closedb: 	Close Database Connection
 * return: 	1 on SUCCESS
 * author:	@SG
 * */
int closedb(void);

/* ---------------- ADD/REMOVE -------------------- */

/* addtag: 	Create a new tag in kwest
 * param: 	char *tagname
 * return: 	1 on SUCCESS
 * author:	@SG
 * */
int addtag(char *tagname);

/* removetag: 	Remove an existing tag from kwest 
 * param: 	char *tagname
 * return: 	1 on SUCCESS
 * author:	
 * */
int removetag(char *tagname);

/* addfile: 	Add file to kwest
 * param: 	char *abspath
 * return: 	1 on SUCCESS
 * author:	@SG 
 * */
int addfile(char *abspath);

/* removefile: 	Remove file form kwest 
 * param: 	char *path - Path in Kwest
 * return: 	1 on SUCCESS
 * author:  
 * */
int removefile(char *path);

/* addfilemetadata: Add metadata for a file generated by external libraries 
 * param: 	int f_hashkey - Hash value for file
 * param: 	structure meta - holds all metadata associated with a file, generated by external libraries.
 * return: 	1 on SUCCESS
 * author: 
 * */
int addfilemetadata(int f_hashkey,struct meta *m);

/* removefilemetadata: Remove metadata for existing file
 * param: 	int f_hashkey - Hash value for file
 * return: 	1 on SUCCESS
 * author: 	
 * */
int removefilemetadata(int f_hashkey);

/* --------------- Tag-File Relation ------------- */

/* tagfile: 	Associate a tag with a file 
 * param: 	char *t - tagname
 * param: 	char *f - filename
 * return: 	1 on SUCCESS
 * author:  	@SG
 * */
int tagfile(char *t,char *f);

/* untagfile: 	Remove the existing association between the tag and file
 * param: 	char *t - tagname
 * param: 	char *f - filename
 * return: 	1 on SUCCESS
 * author: 
 * */
int untagfile(char *t,char *f);

/* getfile: 	Return list of files associated to given tag 
 * param:	char *t - tagname
 * return:  	node *head - Link List containing abspath of files 
 * author:  	@SG
 * */
node *getfile(char *t);

/* gettag: 	Return list of tags associated with a given file
 * param: 	char *f - filename
 * return:  	node *head - Link List containing tagnames
 * author: 
 * */
node *gettag(char *f);


/*----------------- Tag-Tag Relation ------------------*/

/* addassociation: Associate a tag with another tag 
 * param: 	char *t1,*t2 - tagname of both tags to be associated
 * param: 	char *relationtype - relation between tags to be formed
 * return: 	1 on SUCCESS
 * author:  	@SG
 * */
int addassociation(char *t1,char *t2,char *relationtype);

/* removeassociation: Remove the existing association between the two tags 
 * param: 	char *t1,*t2 - tagname of both tags whose associated is to be removed
 * param: 	char *relationtype - relation between tags to be removed
 * return: 	1 on SUCCESS
 * author:	
 * */
int removeassociation(char *t1,char *t2,char *relationtype);

/* getassociationrelation: Return type of association between the two tags
 * param: 	char *t1,*t2 - tagname of both tags in association
 * return: 	int relationid
 * author:	
 * */
int getassociationrelation(char *t1,char *t2);

/* getassociation: Get tag having a particular association with another tag 
 * param: 	char *t - tagname
 * param: 	char *relationtype - relation between tags
 * return: 	node *head - Link List of related tagnames
 * author:  	@SG 
 * */
node* getassociation(char *t,char *relationtype);

/* ----------------- Associations --------------------- */

/* addrelation: Create a new association type 
 * param: 	char *relationtype
 * return: 	int relationid and 0 if unable to add relation
 * author:	@SG 
 * */
int addrelation(char *relationtype);

/* removerelation: Remove an existing association type
 * param: 	char *relationtype
 * return: 	1 on SUCCESS
 * author: 	
 * */
int removerelation(char *relationtype);

/* getrelationid: Returns relationid for given relationtype 
 * param: 	char *relationtype
 * return: 	int relationid
 * author:	@SG
 * */
int getrelationid(char *relationtype);

/* getrelationtype: Returns relationtype for given relationid
 * param: 	int relationid
 * return: 	char *relationtype
 * author:	
 * */
char *getrelationtype(int relationid);

/* --------------------- Others --------------------- */

/* listtags: 	List all tags in the system 
 * param: 	void
 * return: 	node * head - Link List of tagnames
 * author: 	
 * */
node *listtags(void);

/* -------------------- Hashing --------------------- */

/* sethashfile: Generate hash_key for new file to be added in kwest
 * param: 	char *abspath - Absolute Path of File
 * return: 	int f_hashkey
 * author:	@SG 
 * */
int sethashfile(char *abspath);

/* sethashtag: Generate hash_key for a new tag to be created in kwest
 * param: 	char *tagname
 * return: 	int t_hashkey 
 * author:	@SG 
 * */
int sethashtag(char *tagname);

/* gethashfilekey: Hash_key for file in kwest
 * param: 	char *abspath - Absolute Path of File
 * return: 	int f_hashkey 
 * author:	@SG 
 * */
int gethashfilekey(char *abspath);

/* gethashtagkey: Hash_key for a tag in kwest
 * param: 	char *tagname
 * return: 	int t_hashkey 
 * author:	@SG 
 * */
int gethashtagkey(char *tagname);

/* gethashfile: Retrieve filename by its hash_key
 * param: 	int f_hashkey - hash key of file 
 * return: 	char *filename
 * author:	@SG 
 * */
char *gethashfile(int f_hashkey);

/* gethashtag: Retrieve tag name by its hash_key
 * param: 	int t_hashkey - hash key of tag 
 * return: 	char *tagname
 * author: 	@SG 
 * */
char *gethashtag(int t_hashkey);

#endif
