
/* Database functions
 * list of functions:
 * addtag
 * removetag
 * addfile
 * removefile
 * addfilemetadata
 * removefilemetadata
 * tagfile
 * untagfile
 * getfile
 * gettag
 * addassociation
 * removeassociation
 * getassociationrelation
 * getassociation
 * addrelation
 * removerelation
 * getrelationid
 * getrelationtype
 * listtags
 * sethashfile
 * sethashtag
 * gethashfilekey
 * gethashtagkey
 * gethashfile
 * gethashtag
 */

#ifndef DBFUNC_H_INCLUDED
#define DBFUNC_H_INCLUDED

/* sqlite header file */
#include <sqlite3.h>

/* Structure for holding metadata of a file*/
struct meta{
int	inode;
int     size; 
};

/* ---------------- ADD/REMOVE -------------------- */

/* addtag: 
 * input: tagname as string
 * return: integer for operation status
 * operation: Create a new tag in kwest
 * */
int addtag(char *tagname);

/* removetag: 
 * input: tagname as string
 * return: integer for operation status
 * operation: Remove an existing tag from kwest
 * */
int removetag(char *tagname);

/* addfile: 
 * input: abspath (Absolute Path) as string. It is the path of the file in base file system on which fuse is mounted.
 * return: integer for operation status
 * operation: Add file to kwest
 * */
int addfile(char *abspath);

/* removefile: 
 * input: path as string. path can be a filename or a hierarchy of tags it is associated with in kwest.
 * return: integer for operation status
 * operation: Remove file form kwest
 * */
int removefile(char *path);

/* addfilemetadata: 
 * input: Hash value for file (f_hashkey) as integer
 * input: structure meta. It holds all metadata associated with a file, generated by external libraries.
 * return: integer for operation status
 * operation: Add metadata for a file generated by external libraries
 * */
int addfilemetadata(int f_hashkey,struct meta *m);

/* removefilemetadata: 
 * input: Hash value for file (f_hashkey) as integer
 * return: integer for operation status
 * operation: Remove metadata for existing file
 * */
int removefilemetadata(int f_hashkey);

/* --------------- Tag-File Relation ------------- */

/* tagfile: 
 * input: tagname as string
 * input: filename as string
 * return: integer for operation status
 * operation: Associate a tag with a file
 * */
int tagfile(char *t,char *f);

/* untagfile: 
 * input: tagname as string
 * input: filename as string
 * return: integer for operation status
 * operation: Remove the existing association between the tag and file
 * */
int untagfile(char *t,char *f);

/* getfile: 
 * input: tagname as string
 * return: filename as string. NULL if no file found
 * operation: Return list of files associated to given tag
 * */
char *getfile(char *t);

/* gettag: 
 * input: filename as string
 * return: tagname as string. NULL if no tag found.
 * operation: Return list of tags associated with a given file
 * */
char *gettag(char *f);


/*----------------- Tag-Tag Relation ------------------*/

/* addassociation: 
 * input: tagname of both tags to be associated as string
 * input: relationtype between tags to be formed as string
 * return: integer for operation status
 * operation: Associate a tag with another tag
 * */
int addassociation(char *t1,char *t2,char *relationtype);

/* removeassociation: 
 * input: tagname of both tags whose associated is to be removed as string
 * input: relationtype between tags to be removed as string
 * return: integer for operation status
 * operation: Remove the existing association between the two tags
 * */
int removeassociation(char *t1,char *t2,char *relationtype);

/* getassociationrelation: 
 * input: tagname of both tags in association as string
 * return: relationid between tags as integer
 * operation: Return type of association between the two tags
 * */
int getassociationrelation(char *t1,char *t2);

/* getassociation: 
 * input: tagname as string
 * input: relationtype between tags as string
 * return: related tagname as string
 * operation: Get tag having a particular association with another tag
 * */
char* getassociation(char *t,char *relationtype);

/* ----------------- Associations --------------------- */

/* addrelation: 
 * input: relationtype as string
 * return: relationid as integer. 0 if unable to add relation
 * operation: Create a new association type
 * */
int addrelation(char *relationtype);

/* removerelation: 
 * input: relationtype as string
 * return: integer for operation status
 * operation: Remove an existing association type
 * */
int removerelation(char *relationtype);

/* getrelationid: 
 * input: relationtype as string
 * return: relationid as integer
 * operation: Returns relationid for given relationtype
 * */
int getrelationid(char *relationtype);

/* getrelationtype: 
 * input: relationid as integer
 * return: relationtype as string
 * operation: Returns relationtype for given relationid
 * */
char *getrelationtype(int relationid);

/* --------------------- Others --------------------- */

/* listtags: 
 * input: void
 * return: tagname string. NULL if no tag found
 * operation: List all tags in the system
 * */
char *listtags(void);

/* -------------------- Hashing --------------------- */

/* sethashfile:
 * input: abspath (Absolute Path). It is the path of the file in base file system on which fuse is mounted.
 * return: f_hashkey 
 * operation: Generate hash_key for new file to be added in kwest
 * */
int sethashfile(char *abspath);

/* sethashtag:
 * input: tag name string 
 * return: t_hashkey 
 * operation: Generate hash_key for a new tag to be created in kwest
 * */
int sethashtag(char *tagname);

/* gethashfilekey:
 * input: path as string. path can be a filename or a hierarchy of tags it is associated with in kwest.
 * return: f_hashkey 
 * operation: Hash_key for file in kwest
 * */
int gethashfilekey(char *path);

/* gethashtagkey:
 * input: tag name string 
 * return: t_hashkey 
 * operation: Hash_key for a tag in kwest
 * */
int gethashtagkey(char *tagname);

/* gethashfile:
 * input: hash_key of file 
 * return: filename string 
 * operation: Retrieve filename by its hash_key
 * */
char *gethashfile(int f_hashkey);

/* gethashtag:
 * input: hash_key of tag 
 * return: tag name string 
 * operation: Retrieve tag name by its hash_key
 * */
char *gethashtag(int t_hashkey);

#endif
